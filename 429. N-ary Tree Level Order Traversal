/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
    public List<List<Integer>> levelOrder(Node root) {
        List<List<Integer>> bigList = new ArrayList<>();
        Queue<Node> queue = new LinkedList<>();

        if(root==null){
            return bigList;
        }
        queue.add(root);

        while(!queue.isEmpty()){
            int levelSize = queue.size();
            List<Integer> smallList = new ArrayList<>();
            for(int i = 0; i<levelSize; i++){
                Node currentNode = queue.remove();
                smallList.add(currentNode.val);

                for(Node child : currentNode.children){
                    if(child!=null){
                        queue.add(child);
                    }
                }
            } 

            bigList.add(smallList);
        }

        return bigList;
    }
}
